{
  "metadata": {
    "type": "task",
    "status": "active",
    "priority": "high",
    "parent_project": "2025-06-28_my-first-ai-project",
    "created": "2025-06-28T09:45:42Z",
    "updated": "2025-06-28T09:45:42Z",
    "title": "Prototype UI Flow",
    "description": "Interactive Prototyping TASK with shadcn/ui components"
  },
  "details": {
    "task_name": "Prototype UI Flow",
    "summary": "Build interactive prototype using shadcn/ui components with automated testing via Selenium.",
    "context": {
      "feature": "{{FEATURE_NAME}}",
      "user_story": "As a {{USER_TYPE}}, I want to {{USER_GOAL}} so that {{USER_BENEFIT}}",
      "design_specs": "{{DESIGN_REFERENCE}}"
    },
    "pre_conditions": [
      "Wireframes approved",
      "Shadcn/ui components identified",
      "Test scenarios defined"
    ],
    "steps": [
      {
        "description": "Component Research",
        "status": "pending"
      },
      {
        "description": "Build Layout Structure",
        "status": "pending"
      },
      {
        "description": "Add Interactivity",
        "status": "pending"
      },
      {
        "description": "Visual Polish",
        "status": "pending"
      },
      {
        "description": "Automated Testing Setup",
        "status": "pending"
      },
      {
        "description": "User Flow Documentation",
        "status": "pending"
      }
    ],
    "definition_of_done": [
      "All components render correctly",
      "Interactions work as designed",
      "Responsive on all target devices",
      "Automated tests pass",
      "Screenshots captured and stored",
      "Design decisions documented in RAG"
    ],
    "deliverables": [
      "Working prototype URL",
      "Component documentation",
      "Test automation scripts",
      "Visual regression baseline",
      "User flow screenshots"
    ],
    "instructions": {
      "inherits_from": "base_task.md workflow",
      "task_specific": [
        "Always start by researching existing shadcn components",
        "Build incrementally - layout first, then interactions",
        "Test each component in isolation before integration",
        "Use Selenium to verify all interactions work",
        "Document component customizations for reuse"
      ]
    }
  },
  "workflow_guidance": {
    "before_starting": {
      "description": "Before starting:",
      "steps": [
        "# Load context from similar tasks",
        "rag_memory___hybridSearch query=\"{{TITLE}} similar tasks patterns\"",
        "rag_memory___searchNodes query=\"type:task status:completed similar:{{TITLE}}\"",
        "# Create task entity and link to project",
        "rag_memory___createEntities entities=[{\"name\": \"task_{{TITLE}}\", \"type\": \"task\", \"properties\": {\"created\": \"{{DATE}}\", \"objective\": \"{{TASK_OBJECTIVE}}\", \"parent_project\": \"{{PARENT_PROJECT}}\"}}}]",
        "rag_memory___createRelations relations=[{\"from\": \"project_{{PARENT_PROJECT}}\", \"to\": \"task_{{TITLE}}\", \"type\": \"contains\"}]"
      ]
    },
    "step_execution": {
      "description": "For EVERY step:",
      "steps": [
        "1. BEFORE starting:",
        "- Note time: Update CURRENT_IMPLEMENTATION.json with step start time",
        "- Query patterns: rag_memory___hybridSearch query=\"[step description] best practices\"",
        "- Create step entity in RAG with estimated duration",
        "2. DURING execution:",
        "- Update CURRENT_IMPLEMENTATION.json every 30 minutes",
        "- Document blockers immediately in task file",
        "- If blocked >1hr: Query RAG for similar blockers and solutions",
        "3. AFTER completion:",
        "- Calculate duration: Note in step as #duration:45m",
        "- Update step: Mark #status:completed",
        "- Store results:",
        "rag_memory___createEntities entities=[{\"name\": \"step_{{DATE}}_[step_num]\", \"type\": \"completed_step\", \"properties\": {\"duration\": \"[actual]\", \"estimate\": \"[estimated]\", \"blockers\": \"[any blockers]\", \"output\": \"[deliverable]\", \"lessons\": \"[key learning]\"}}}]",
        "- If duration >2x estimate: Add to CRITICAL_FINDINGS.md"
      ]
    },
    "progress_check": {
      "description": "After completing 3 steps:",
      "steps": [
        "- Query: rag_memory___hybridSearch query=\"my recent steps velocity blockers\"",
        "- Identify patterns in execution",
        "- Adjust approach if needed",
        "- Update estimates for remaining steps"
      ]
    },
    "task_completion": {
      "description": "When all steps complete:",
      "steps": [
        "1. Calculate total metrics (duration, velocity, blockers)",
        "2. Document key outcomes in CURRENT_IMPLEMENTATION.json",
        "3. Store and process complete task:",
        "# Store document",
        "rag_memory___storeDocument id=\"task_{{TITLE}}_complete\" content=\"[full task content]\"",
        "# Process for search",
        "rag_memory___chunkDocument documentId=\"task_{{TITLE}}_complete\"",
        "rag_memory___embedChunks documentId=\"task_{{TITLE}}_complete\"",
        "rag_memory___extractTerms documentId=\"task_{{TITLE}}_complete\"",
        "rag_memory___linkEntitiesToDocument documentId=\"task_{{TITLE}}_complete\" entityNames=[\"task_{{TITLE}}\"]",
        "# Update entity",
        "rag_memory___updateEntity name=\"task_{{TITLE}}\" properties={\"status\": \"completed\", \"duration\": \"[total]\"}",
        "4. For each critical finding:",
        "- Add 1-line to CRITICAL_FINDINGS.md: \"Finding description â†’ keywords\"",
        "- Execute FULL PIPELINE in CRITICAL_FINDINGS.md protocol"
      ]
    },
    "common_pitfalls": [
      "AVOID these patterns:",
      "Starting step without clear success criteria",
      "Skipping RAG queries \"to save time\"",
      "Not documenting blockers immediately",
      "Batching commits (commit after each working step)",
      "Estimating without checking historical data",
      "Working >2hrs without updating CURRENT_IMPLEMENTATION.json"
    ]
  }
}
