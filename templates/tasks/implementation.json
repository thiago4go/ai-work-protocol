{
  "metadata": {
    "type": "task",
    "status": "active",
    "priority": "high",
    "parent_project": "{{PARENT_PROJECT}}",
    "created": "{{DATE}}",
    "updated": "{{DATE}}",
    "title": "{{TITLE}}",
    "description": "Implementation task template",
    "template_version": "1.1"
  },
  "details": {
    "task_name": "{{TITLE}}",
    "objective_value": {
      "what": "{{IMPLEMENTATION_GOAL}}",
      "why": "Enables {{TARGET_USER}} to {{USER_GOAL}}",
      "done_when": "User can {{SPECIFIC_ACTION}} without errors"
    },
    "context": {
      "project": "{{PARENT_PROJECT}}",
      "user_story": "As {{TARGET_USER}}, I want to {{USER_GOAL}} so that {{BENEFIT}}",
      "deliverable": "Working code that {{MEASURABLE_OUTCOME}}"
    },
    "implementation_plan": {
      "approach": "{{APPROACH}}",
      "dependencies": "{{DEPENDENCIES}}",
      "testing": "{{TEST_STRATEGY}}"
    },
    "steps": [
      {
        "description": "Setup: Load design from RAG + verify dependencies",
        "status": "pending"
      },
      {
        "description": "Core logic: Implement main functionality (no edge cases)",
        "status": "pending"
      },
      {
        "description": "Happy path test: Verify basic functionality works",
        "status": "pending"
      },
      {
        "description": "Edge cases: Handle errors + validate inputs",
        "status": "pending"
      },
      {
        "description": "Integration: Connect to existing code + full test suite",
        "status": "pending"
      },
      {
        "description": "Polish: Refactor + document + commit working code",
        "status": "pending"
      }
    ],
    "success_criteria": [
      "Feature works as designed",
      "Tests pass",
      "Code is clean and documented",
      "User can use the feature"
    ],
    "instructions": {
      "inherits_from": "base_task.md workflow",
      "implementation_specific": [
        "Load design decisions before starting",
        "Follow existing code patterns",
        "Test each step before moving on",
        "Commit working code frequently",
        "Document technical debt immediately"
      ],
      "implementation_queries": [
        "Before implementing: rag_memory___hybridSearch query=\"{{PARENT_PROJECT}} design architecture decisions\"",
        "Before implementing: rag_memory___searchNodes query=\"type:design parent:{{PARENT_PROJECT}}\"",
        "After each step: rag_memory___createEntities entities=[{\"name\": \"impl_step_{{TIMESTAMP}}\", \"type\": \"implementation_detail\", \"properties\": {\"feature\": \"[what built]\", \"pattern\": \"[pattern used]\", \"debt\": \"[any shortcuts]\"}}}]"
      ],
      "quality_gates": [
        "All tests pass",
        "Code reviewed against standards",
        "No critical TODOs",
        "Performance validated",
        "Documentation complete"
      ]
    },
    "placeholders_guide": {
      "IMPLEMENTATION_GOAL": {
        "type": "string",
        "description": "The specific goal of this implementation task."
      },
      "TARGET_USER": {
        "type": "string",
        "description": "The target user for this feature."
      },
      "USER_GOAL": {
        "type": "string",
        "description": "What the user wants to achieve."
      },
      "SPECIFIC_ACTION": {
        "type": "string",
        "description": "A specific action the user can perform."
      },
      "PARENT_PROJECT": {
        "type": "string",
        "description": "The parent project of this task."
      },
      "BENEFIT": {
        "type": "string",
        "description": "The benefit for the user."
      },
      "MEASURABLE_OUTCOME": {
        "type": "string",
        "description": "A measurable outcome of the implementation."
      },
      "APPROACH": {
        "type": "string",
        "description": "The technical approach for implementation."
      },
      "DEPENDENCIES": {
        "type": "string",
        "description": "Technical dependencies."
      },
      "TEST_STRATEGY": {
        "type": "string",
        "description": "Testing strategy."
      }
    }
  }
}