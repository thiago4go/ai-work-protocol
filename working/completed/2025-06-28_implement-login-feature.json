{
  "metadata": {
    "type": "task",
    "status": "completed",
    "priority": "high",
    "parent_project": "2025-06-28_my-first-ai-project",
    "created": "2025-06-28T08:06:51Z",
    "updated": "2025-06-28T08:09:38Z",
    "title": "Implement Login Feature",
    "description": "Implementation task template"
  },
  "details": {
    "task_name": "Implement Login Feature",
    "objective_value": {
      "what": "{{IMPLEMENTATION_GOAL}}",
      "why": "Enables {{TARGET_USER}} to {{USER_GOAL}}",
      "done_when": "User can {{SPECIFIC_ACTION}} without errors"
    },
    "context": {
      "project": "2025-06-28_my-first-ai-project",
      "user_story": "As {{TARGET_USER}}, I want to {{USER_GOAL}} so that {{BENEFIT}}",
      "deliverable": "Working code that {{MEASURABLE_OUTCOME}}"
    },
    "implementation_plan": {
      "approach": "{{APPROACH}}",
      "dependencies": "{{DEPENDENCIES}}",
      "testing": "{{TEST_STRATEGY}}"
    },
    "steps": [
      {
        "description": "Setup: Load design from RAG + verify dependencies",
        "status": "completed",
        "estimated_time": "20m",
        "completed_time": "2025-06-28T08:08:00Z"
      },
      {
        "description": "Core logic: Implement main functionality (no edge cases)",
        "status": "pending",
        "estimated_time": "2h"
      },
      {
        "description": "Happy path test: Verify basic functionality works",
        "status": "pending",
        "estimated_time": "30m"
      },
      {
        "description": "Edge cases: Handle errors + validate inputs",
        "status": "pending",
        "estimated_time": "1h"
      },
      {
        "description": "Integration: Connect to existing code + full test suite",
        "status": "pending",
        "estimated_time": "1h"
      },
      {
        "description": "Polish: Refactor + document + commit working code",
        "status": "pending",
        "estimated_time": "30m"
      }
    ],
    "success_criteria": [
      "Feature works as designed",
      "Tests pass",
      "Code is clean and documented",
      "User can use the feature"
    ],
    "instructions": {
      "inherits_from": "base_task.md workflow",
      "implementation_specific": [
        "Load design decisions before starting",
        "Follow existing code patterns",
        "Test each step before moving on",
        "Commit working code frequently",
        "Document technical debt immediately"
      ],
      "implementation_queries": [
        "Before implementing: rag_memory___hybridSearch query=\"2025-06-28_my-first-ai-project design architecture decisions\"",
        "Before implementing: rag_memory___searchNodes query=\"type:design parent:2025-06-28_my-first-ai-project\"",
        "After each step: rag_memory___createEntities entities=[{\"name\": \"impl_step_{{TIMESTAMP}}\", \"type\": \"implementation_detail\", \"properties\": {\"feature\": \"[what built]\", \"pattern\": \"[pattern used]\", \"debt\": \"[any shortcuts]\"}}}]"
      ],
      "quality_gates": [
        "All tests pass",
        "Code reviewed against standards",
        "No critical TODOs",
        "Performance validated",
        "Documentation complete"
      ]
    }
  },
  "workflow_guidance": {
    "before_starting": {
      "description": "Before starting:",
      "steps": [
        "# Load context from similar tasks",
        "rag_memory___hybridSearch query=\"Implement Login Feature similar tasks patterns\"",
        "rag_memory___searchNodes query=\"type:task status:completed similar:Implement Login Feature\"",
        "# Create task entity and link to project",
        "rag_memory___createEntities entities=[{\"name\": \"task_Implement Login Feature\", \"type\": \"task\", \"properties\": {\"created\": \"2025-06-28T08:06:51Z\", \"objective\": \"{{TASK_OBJECTIVE}}\", \"parent_project\": \"2025-06-28_my-first-ai-project\"}}}]",
        "rag_memory___createRelations relations=[{\"from\": \"project_2025-06-28_my-first-ai-project\", \"to\": \"task_Implement Login Feature\", \"type\": \"contains\"}}]"
      ]
    },
    "step_execution": {
      "description": "For EVERY step:",
      "steps": [
        "1. BEFORE starting:",
        "- Note time: Update CURRENT_IMPLEMENTATION.json with step start time",
        "- Query patterns: rag_memory___hybridSearch query=\"[step description] best practices\"",
        "- Create step entity in RAG with estimated duration",
        "2. DURING execution:",
        "- Update CURRENT_IMPLEMENTATION.json every 30 minutes",
        "- Document blockers immediately in task file",
        "- If blocked >1hr: Query RAG for similar blockers and solutions",
        "3. AFTER completion:",
        "- Calculate duration: Note in step as #duration:45m",
        "- Update step: Mark #status:completed",
        "- Store results:",
        "rag_memory___createEntities entities=[{\"name\": \"step_2025-06-28T08:06:51Z_[step_num]\", \"type\": \"completed_step\", \"properties\": {\"duration\": \"[actual]\", \"estimate\": \"[estimated]\", \"blockers\": \"[any blockers]\", \"output\": \"[deliverable]\", \"lessons\": \"[key learning]\"}}}]",
        "- If duration >2x estimate: Add to CRITICAL_FINDINGS.md"
      ]
    },
    "progress_check": {
      "description": "After completing 3 steps:",
      "steps": [
        "- Query: rag_memory___hybridSearch query=\"my recent steps velocity blockers\"",
        "- Identify patterns in execution",
        "- Adjust approach if needed",
        "- Update estimates for remaining steps"
      ]
    },
    "task_completion": {
      "description": "When all steps complete:",
      "steps": [
        "1. Calculate total metrics (duration, velocity, blockers)",
        "2. Document key outcomes in CURRENT_IMPLEMENTATION.json",
        "3. Store and process complete task:",
        "# Store document",
        "rag_memory___storeDocument id=\"task_Implement Login Feature_complete\" content=\"[full task content]\"",
        "# Process for search",
        "rag_memory___chunkDocument documentId=\"task_Implement Login Feature_complete\"",
        "rag_memory___embedChunks documentId=\"task_Implement Login Feature_complete\"",
        "rag_memory___extractTerms documentId=\"task_Implement Login Feature_complete\"",
        "rag_memory___linkEntitiesToDocument documentId=\"task_Implement Login Feature_complete\" entityNames=[\"task_{{TITLE}}\"]",
        "# Update entity",
        "rag_memory___updateEntity name=\"task_Implement Login Feature\" properties={\"status\": \"completed\", \"duration\": \"[total]\"}",
        "4. For each critical finding:",
        "- Add 1-line to CRITICAL_FINDINGS.md: \"Finding description â†’ keywords\"",
        "- Execute FULL PIPELINE in CRITICAL_FINDINGS.md protocol"
      ]
    },
    "common_pitfalls": [
      "AVOID these patterns:",
      "Starting step without clear success criteria",
      "Skipping RAG queries \"to save time\"",
      "Not documenting blockers immediately",
      "Batching commits (commit after each working step)",
      "Estimating without checking historical data",
      "Working >2hrs without updating CURRENT_IMPLEMENTATION.json"
    ]
  }
}
